" vim: set sw=2 ts=2 sts=2 et tw=120 foldmarker={,} foldlevel=0 foldmethod=marker
" init
set nocompatible

let localVimDir = '~/.vim/local'

" call before
if filereadable(expand("~/.vimrc.before"))
  source \~/.vimrc.before
endif

" load functions
if filereadable(expand("~/.vimrc.functions"))
  source \~/.vimrc.functions
endif

" call bundles
if filereadable(expand("~/.vimrc.bundles"))
  source \~/.vimrc.bundles
endif

""" general
" enable indent files
filetype indent on
" enable ft plugins
filetype plugin on
" enable syntax highlight
syntax on

" enable mouse
set mouse=a
set mousehide

" default encoding
set encoding=utf-8
scriptencoding utf-8

" complete mode
set complete-=i

set autoread
set shortmess+=filmnrxoOtT
set viewoptions=folds,options,cursor,unix,slash
set virtualedit=onemore
set history=1000 "store lots of :cmdline history
set nospell
set hidden
set iskeyword-=.
set iskeyword-=#
set iskeyword-=-

if has('persistent_undo')
  " undo settings
  let localVimUndodir = expand(localVimDir . '/undo')
  if !isdirectory(localVimUndodir)
    call mkdir(localVimUndodir, "p", 0700)
  endif
  let &undodir = localVimUndodir
  set undofile
  set undolevels=100
  set undoreload=10000
endif
set noswapfile
set nobackup

" ignore files
set wildignore+=*/tmp/*,*.swp

""" visual ui
set tabpagemax=15 "show max 15 tabs
set showmode "show current mode down the bottom
set cursorline

" set highlight colors
highlight clear SignColumn
highlight clear LineNr

if has('cmdline_info')
  set showcmd "show incomplete cmds down the bottom
  set ruler
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) "a ruler on steroids
endif

if has('statusline')
  " displays always
  set laststatus=2
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set linespace=0
set number "show line numbers

" search highlight
set showmatch
set incsearch "find the next match as we type the search
set hlsearch "highlight searches by default
set winminheight=0 "min windows line height

" case handling
set ignorecase
set smartcase

" menu
set wildmenu "enable menu list
set wildmode=list:longest,full "menu list config
set whichwrap=b,s,h,l,<,>,[,]

" horizontal/vertical scroll settings
set scrolljump=5
set scrolloff=3
set sidescrolloff=7
set sidescroll=1

" fold
set foldmethod=indent "fold based on indent
set foldnestmax=3 "deepest fold is 3 levels
set nofoldenable "disable by default

" display tabs and trailing spaces
set list
set listchars=tab:▷⋅,trail:⋅,extends:>,precedes:<,nbsp:+,eol:¬

" configure default split
set splitright
set splitbelow

set colorcolumn=+1 "mark the ideal max text width

" enable 256 colors console
set t_Co=256

""" formatting
set nowrap "don't wrap lines
set linebreak "wrap lines at convenient points
set showbreak=↪
set autoindent

" tab/indent settings
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set smarttab

set pastetoggle=<F2>
set nrformats-=octal

set ttimeout
set ttimeoutlen=100

" formatting options
set formatoptions-=o
set formatoptions+=j

" per project config
set exrc

""" plugins
""" ack.vim
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
  let g:ctrlp_user_command = 'ag %s -l --nocolor -f -g ""'
endif

""" papercolor
let g:PaperColor_Theme_Options = {
      \   'transparent_background': 0
      \ }

""" vim-indent-guides
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=darkgrey
autocmd VimEnter,Colorscheme * :hi IndentGuidesEvenm ctermbg=darkgrey

""" vim-over

""" numbers
let g:numbers_exclude = ['buffers', 'tagbar', 'nerdtree']
nnoremap <F3> :NumbersToggle<CR>

""" vim-airline
" theme
let g:airline_theme='wombat'
" populate gliphs
let g:airline_powerline_fonts = 2
" hide empty sections
let g:airline_skip_empty_sections = 1
" displays all the buffers when only one tab is open
let g:airline#extensions#tabline#enabled = 1
" set alternative tab separator
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
" enable ale
let g:airline#extensions#ale#enabled = 1

""" buffergator
" right side of the screen
let g:buffergator_viewport_split_policy = 'R'
" enable keymappings...
let g:buffergator_suppress_keymaps = 1
" loop buffers
let g:buffergator_mru_cycle_loop = 1
" previous buffer open
nmap <leader>jb :BuffergatorMruCyclePrev<cr>
" next buffer open
nmap <leader>kb :BuffergatorMruCycleNext<cr>
" list of buffers open
nmap <leader>bb :BuffergatorToggle<cr>

"""tslime.vim
map <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

""" vim-togglelist
""" vim-unimpaired

""" NERDTree
let g:NERDShutUp=1
map <leader>n :NERDTreeToggle<CR>
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.git$']
" change CWD to follow tree root
let g:NERDTreeChDirMode=2
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeShowHidden=1

""" NERDtree git
""" vim-eunuch

""" CtrlP
" use leader
let g:ctrlp_map = '<leader>p'
" set default mode
let g:ctrlp_cmd = 'CtrlP'
" set root dir mode
let g:ctrlp_working_path_mode = 'ra'
" default open file mode = current window
let g:ctrlp_open_new_file = 'r'
" multiple files open = current window
let g:ctrlp_open_multiple_files = 'r'
" customize promp mappings
let g:ctrlp_prompt_mappings = {
      \ 'AcceptSelection("h")': ['<C-x>'],
      \ 'AcceptSelection("v")': ['<C-v>']
      \}

let g:ctrlp_custom_ignore = {
      \ 'dir': '\v[\/](_build|bower_components|cover|dist|deps|node_modules)|(\.(swp|git|hg))$',
      \ 'file': '\.exe\'
      \}

""" fzf.vim
let g:fzf_command_prefix = 'Fzf'
nmap <leader>f :FzfFiles<CR>

""" vim-surround
""" vim-repeat
""" vim-abolish
""" vim-argumentative
""" gundo.vim
nnoremap <F5> :GundoToggle<CR>

""" vim-textobj-user
""" vim-textobj-indent
""" vim-textobj-xmlattr

""" vim-textobj-sentence
augroup textobj_sentence
  autocmd!
  autocmd FileType markdown call textobj#sentence#init()
  autocmd FileType textile call textobj#sentence#init()
  autocmd FileType text call textobj#sentence#init()
augroup END

""" vim-textobj-quote
augroup textobj_quote
  autocmd!
  autocmd FileType markdown call textobj#quote#init()
  autocmd FileType textile call textobj#quote#init()
  autocmd FileType text call textobj#quote#init()
augroup END

""" vim-multiple-cursors
""" vim-easymotion

""" ale
let g:ale_completion_enabled = 0

let g:ale_list_window_size = 5
let g:ale_open_list = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

" let g:ale_fix_on_save = 1

let g:ale_linters = {
      \ 'css': ['eslint'],
      \ 'javascript': ['eslint'],
      \ 'jsx': ['eslint']
      \}

let g:ale_linters_explicit = 1

let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'elixir': ['mix_format'],
      \ 'ruby': ['rubocop'],
      \ 'javascript': ['eslint', 'prettier'],
      \ 'jsx': ['eslint', 'prettier']
      \}

let g:ale_fixers_explicit = 1

let g:ale_pattern_options = {
      \ '\.min\.js$': {'ale_linters': [], 'ale_fixers': []},
      \ '\.min\.css$': {'ale_linters': [], 'ale_fixers': []},
      \}

let g:ale_elixir_elixir_ls_release = '~/.local/opt/elixir-ls'

nmap <Leader>F <Plug>(ale_fix)
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

""" vim-test
let test#strategy = 'tslime'
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
"nmap <silent> <leader>a :TestSuite<CR>
"nmap <silent> <leader>l :TestLast<CR>
"nmap <silent> <leader>g :TestVisit<CR>

""" NERDCommenter
""" tabular
nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a== :Tabularize /=/=<CR>
vmap <Leader>a== :Tabularize /=/=<CR>
nmap <Leader>a=> :Tabularize /=><CR>
vmap <Leader>a=> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a,, :Tabularize /,\zs<CR>
vmap <Leader>a,, :Tabularize /,\zs<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>

""" tags
nnoremap <silent> <C-t><C-t> :call Tags()<CR>

""" tagbar
nmap <F4> :TagbarToggle<CR>

let g:tagbar_type_css = {
      \ 'ctagstype' : 'Css',
      \ 'kinds'     : [
      \ 'c:classes',
      \ 's:selectors',
      \ 'i:identities'
      \ ]
      \ }

let g:tagbar_type_elixir = {
      \ 'ctagstype': 'Elixir',
      \ 'kinds' : [
      \ 'f:functions (public)',
      \ 'g:functions (private)',
      \ 'c:callbacks',
      \ 'd:delegates',
      \ 'e:exceptions',
      \ 'i:implementations',
      \ 'a:macros',
      \ 'o:operators',
      \ 'm:modules',
      \ 'p:protocols',
      \ 'r:records',
      \ 't:types',
      \ 'z:foo'
      \ ]
      \ }

let g:tagbar_type_ruby = {
      \ 'kinds' : [
      \ 'm:modules',
      \ 'c:classes',
      \ 'd:describes',
      \ 'C:contexts',
      \ 'f:methods',
      \ 'F:singleton methods'
      \ ]
      \ }

""" deoplete
let g:deoplete#enable_at_startup = 1
"let g:deoplete#enable_yarp = 1
"let g:deoplete#complete_method = 'complete'
"let g:deoplete#enable_ignore_case= 1
"let g:deoplete#enable_smart_case= 1
"let g:deoplete#enable_camel_case = 0
"let g:deoplete#enable_refresh_always = 0
"let g:deoplete#enable_on_insert_enter = 1
"let g:deoplete#auto_complete_start_length = 2
"let g:deoplete#disable_auto_complete = 0
"let g:deoplete#enable_profile = 0
"let g:deoplete#delimiters = ['/']
"let g:deoplete#max_list = 35
"let g:deoplete#max_processes = 2
"let g:deoplete#max_abbr_width = 0
"let g:deoplete#max_menu_width = 40
"let g:deoplete#auto_complete_delay = 50
"let g:deoplete#auto_refresh_delay = 50
"let g:deoplete#skip_chars = []
" sources
" let g:deoplete#sources = {}
" let g:deoplete#sources._ = ['buffer']
" let g:deoplete#ignore_sources = {}
" patterns
" let g:deoplete#keyword_patterns = {}
" let g:deoplete#omni_patterns = {}
" let g:deoplete#member#prefix_patterns - defined in member.py
" let g:deoplete#omni#input_patterns - defined in omni.py
"let g:deoplete#omni#functions = {}
"let g:deoplete#omni#functions.ruby = 'rubycomplete#complete'
"let g:deoplete#file#enable_buffer_path = 0
"let g:deoplete#tag#cache_limit_size = 500000
"let g:deoplete#buffer#require_same_filetype = 1

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" LanguageClient-neovim
let g:LanguageClient_autoStart = 1
let g:LanguageClient_rootMarkers = {'elixir': ['mix.exs']}
let g:LanguageClient_serverCommands = {
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'javascript.jsx': ['javascript-typescript-stdio'],
    \ }

let g:LanguageClient_loggingLevel='DEBUG'

nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <C-r>r :call LanguageClient#textDocument_rename()<CR>

""" css filetype
augroup filetype_css
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
augroup END

""" javascript filetype
" vim-javascript
augroup filetype_javascript
  autocmd!
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
augroup END

augroup javascript_folding
  autocmd!
  autocmd FileType javascript setlocal foldmethod=syntax
  autocmd FileType javascript set conceallevel=1
augroup END

autocmd BufNewFile,BufRead *.jsx, set filetype=javascript.jsx
" vim-jsx

""" json filetype
augroup json_folding
  autocmd!
  autocmd FileType json setlocal foldmethod=syntax
augroup END

""" html filetype
augroup filetype_html
  autocmd!
  autocmd FileType html setlocal omnifunc=htmlcomplete#CompleteTags
augroup END

""" html5
let g:html5_rdfa_attributes_complete = 0
let g:html5_microdata_attributes_complete = 0

""" emmet-vim
let g:user_emmet_mode='inv'
let g:user_emmet_install_global = 1
let g:user_emmet_leader_key='<C-y>'
let g:user_emmet_settings = {
      \  'javascript.jsx' : {
      \      'extends' : 'jsx',
      \  },
      \}

""" ruby filetype
augroup filetype_ruby
  autocmd!
  autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
  autocmd FileType ruby,eruby let g:Tlist_Ctags_Cmd = "ripper-tags"
augroup END

let g:ruby_ctags_arguments = "-f .git/tags -R --sort=yes --tag-relative=yes"
let g:rails_ctags_arguments = "-f .git/tags -R --sort=yes --tag-relative=yes"

""" vim-ruby
let g:ruby_indent_block_style = 'do'
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
let g:rubycomplete_load_gemfile = 0
let g:rubycomplete_use_bundler = 1

""" vim-rails
""" vim-textobj-ruby
let g:textobj_ruby_more_mappings = 1

""" elixir filetype
augroup filetype_elixir
  autocmd!
  autocmd FileType elixir,eelixir let g:Tlist_Ctags_Cmd = "ctags"
  autocmd FileType elixir,eelixir set tags=.git/tags;
augroup END

let g:elixir_ctags_arguments = "-f .git/tags --fields=+l --recurse --sort=yes --tag-relative=yes"

""" vim-elixir
"""" alchemist.vim
"let g:alchemist_keyword_map = 'K'
"let g:alchemist_tag_map = '<C-]>'
"let g:alchemist_tag_stack_map = '<C-T>'
"let g:alchemist#elixir_erlang_src = "/home/josemrb/projects/source/"

""" typescript + jsx filetype
autocmd BufNewFile,BufRead *.tsx, set filetype=typescript.jsx

augroup filetype_typescript
  autocmd!
  autocmd FileType typescript JsPreTmpl html
  autocmd FileType typescript syn clear foldBraces
augroup END

""" vim-markdown
let g:markdown_fenced_languages = ['html', 'ruby', 'elixir', 'bash=sh']

""" xml filetype
augroup filetype_xml
  autocmd!
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup END

""" vim-simpletodo
let g:simple_todo_tick_symbol = '✔️'

""" vim-mustache-handlebars
let g:mustache_abbreviations = 1

""" vim-git
" on revert git commit message reposition cursor
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

""" vim-fugitive
set statusline+=%{fugitive#statusline()}

""" omnicomplete
set completeopt=menu,preview,longest

set background=dark
colorscheme PaperColor

set secure
