" vim: set sw=2 ts=2 sts=2 et tw=120 foldmarker={,} foldlevel=0 foldmethod=marker
" init
set nocompatible

let localVimDir = '~/.vim/local'

" call before
if filereadable(expand("~/profiles/dotfiles/vim/vimrc.before"))
  source \~/profiles/dotfiles/vim/vimrc.before
endif

" load functions
if filereadable(expand("~/profiles/dotfiles/vim/vimrc.functions"))
  source \~/profiles/dotfiles/vim/vimrc.functions
endif

" call bundles
if filereadable(expand("~/profiles/dotfiles/vim/vimrc.bundles"))
  source \~/profiles/dotfiles/vim/vimrc.bundles
endif

""" general
" enable indent files
filetype indent on
" enable ft plugins
filetype plugin on
" enable syntax highlight
syntax on

" enable mouse
set mouse=a
set mousehide

" default encoding
set encoding=utf-8
scriptencoding utf-8

" complete mode
set complete-=i

set autoread
set shortmess+=filmnrxoOtT
set viewoptions=folds,options,cursor,unix,slash
set virtualedit=onemore
set history=1000 "store lots of :cmdline history
set nospell
set hidden
set iskeyword-=.
set iskeyword-=#
set iskeyword-=-

if has('persistent_undo')
  " undo settings
  let localVimUndodir = expand(localVimDir . '/undo')
  if !isdirectory(localVimUndodir)
    call mkdir(localVimUndodir, "p", 0700)
  endif
  let &undodir = localVimUndodir
  set undofile
  set undolevels=100
  set undoreload=10000
endif
set noswapfile
set nobackup

" ignore files
set wildignore+=*/tmp/*,*.swp

""" visual ui
set tabpagemax=15 "show max 15 tabs
set showmode "show current mode down the bottom
set cursorline

" set highlight colors
highlight clear SignColumn
highlight clear LineNr

if has('cmdline_info')
  set showcmd "show incomplete cmds down the bottom
  set ruler
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) "a ruler on steroids
endif

if has('statusline')
  " displays always
  set laststatus=2
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set linespace=0
set number "show line numbers

" search highlight
set showmatch
set incsearch "find the next match as we type the search
set hlsearch "highlight searches by default
set winminheight=0 "min windows line height

" case handling
set ignorecase
set smartcase

" menu
set wildmenu "enable menu list
set wildmode=list:longest,full "menu list config
set whichwrap=b,s,h,l,<,>,[,]

" horizontal/vertical scroll settings
set scrolljump=5
set scrolloff=3
set sidescrolloff=7
set sidescroll=1

" fold
set foldmethod=indent "fold based on indent
set foldnestmax=3 "deepest fold is 3 levels
set nofoldenable "disable by default

" display tabs and trailing spaces
set list
set listchars=tab:▷⋅,trail:⋅,extends:>,precedes:<,nbsp:+,eol:¬

" configure default split
set splitright
set splitbelow

set colorcolumn=+1 "mark the ideal max text width

" enable 256 colors console
set t_Co=256

if has('termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

""" formatting
set nowrap "don't wrap lines
set linebreak "wrap lines at convenient points
set showbreak=↪
set autoindent

" tab/indent settings
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set smarttab

set pastetoggle=<F2>
set nrformats-=octal

set ttimeout
set ttimeoutlen=100

" formatting options
set formatoptions-=o
set formatoptions+=j

" per project config
set exrc

""" plugins
""" ack.vim
if executable('rg')
  let g:ackprg = 'rg --color=never --column --heading -S --vimgrep'
elseif executable('ag')
  let g:ackprg = 'ag --column -H --nocolor --nogroup -S --vimgrep'
endif

""" quickfix-reflector.vim
""" papercolor
let g:PaperColor_Theme_Options = {
      \   'theme': {
        \     'default.dark': {
          \       'transparent_background': 1
          \     }
          \   }
          \ }

""" vim-indent-guides
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1

""" vim-over
""" numbers
let g:numbers_exclude = ['buffers', 'tagbar', 'nerdtree']
nnoremap <F3> :NumbersToggle<CR>

""" vim-airline
" populate gliphs
let g:airline_powerline_fonts = 2
" hide empty sections
let g:airline_skip_empty_sections = 1
" ALE integration
let g:airline#extensions#ale#enabled = 1
" CoC.vim integration >
let g:airline#extensions#coc#enabled = 1
" tabline integration
" displays all the buffers when only one tab is open
let g:airline#extensions#tabline#enabled = 1
" set alternative tab separator
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
" set formatter
let g:airline#extensions#tabline#formatter = 'unique_tail'

""" vim-airline-themes
" theme
let g:airline_theme='wombat'

""" buffergator
" disable keymaps
let g:buffergator_suppress_keymaps = 1
" right side of the screen
let g:buffergator_viewport_split_policy = 'R'
" loop buffers
let g:buffergator_mru_cycle_loop = 1
" previous buffer open
nmap <Leader>jb :BuffergatorMruCyclePrev<CR>
" next buffer open
nmap <Leader>kb :BuffergatorMruCycleNext<CR>
" list of buffers open
nmap <Leader>bb :BuffergatorToggle<CR>

""" vim-togglelist
""" vim-unimpaired

""" NERDTree
let g:NERDShutUp=1
map <leader>n :NERDTreeToggle<CR>
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.git$']
" change CWD to follow tree root
let g:NERDTreeChDirMode=2
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeShowHidden=1

""" NERDtree git
""" vim-eunuch

""" CtrlP
" use Leader
let g:ctrlp_map = '<Leader>p'
" set default mode
let g:ctrlp_cmd = 'CtrlP'
" set root dir mode
let g:ctrlp_working_path_mode = 'ra'
" additional markers
let g:ctrlp_root_markers = ['mix.exs', 'package.json', 'Gemfile.rb']
" default open file mode = current window
let g:ctrlp_open_new_file = 'r'
" multiple files open = current window
let g:ctrlp_open_multiple_files = 'r'
" customize promp mappings
let g:ctrlp_prompt_mappings = {
      \ 'AcceptSelection("h")': ['<C-x>'],
      \ 'AcceptSelection("v")': ['<C-v>']
      \}
" custom list program
if executable('rg')
  let g:ctrlp_user_command = 'rg %s --color=never --files --hidden --glob "!.git"'
  let g:ctrlp_use_caching = 0
endif
" custom ignore list
let g:ctrlp_custom_ignore = {
      \ 'dir': '\v[\/](_build|bower_components|cover|dist|deps|node_modules)|(\.(swp|git|hg))$',
      \ 'file': '\.exe\'
      \}

""" fzf.vim
nmap <leader>f :GFiles<CR>

""" vim-projectionist
""" fuzzy-projectionist.vim
nmap <Leader>fc :Fcontroller<CR>
nmap <Leader>ft :Ftemplate<CR>
nmap <Leader>fv :Fview<CR>

""" vim-surround
""" vim-repeat
""" vim-abolish
""" vim-swap
""" gundo.vim
nnoremap <F5> :GundoToggle<CR>

""" vim-textobj-user
""" vim-textobj-entire
""" vim-textobj-indent
""" vim-textobj-xmlattr

""" matchit
""" vim-multiple-cursors
""" vim-easymotion
let g:EasyMotion_do_mapping = 0 " Disable default mappings
" `s{char}{char}{label}`
nmap s <Plug>(easymotion-overwin-f2)
" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1
" Line motions
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)
" Word motions
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

""" ale
let g:ale_completion_enabled = 0

let g:ale_linters = {
      \ 'css': ['eslint'],
      \ 'elixir': ['credo'],
      \ 'javascript': ['eslint'],
      \ 'json': ['jq'],
      \ 'jsx': ['eslint']
      \}
let g:ale_linters_explicit = 1
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'elixir': ['mix_format'],
      \ 'ruby': ['rubocop'],
      \ 'javascript': ['prettier'],
      \ 'jsx': ['prettier']
      \}
let g:ale_fixers_explicit = 1
let g:ale_pattern_options = {
      \ '\.min\.js$': {'ale_linters': [], 'ale_fixers': []},
      \ '\.min\.css$': {'ale_linters': [], 'ale_fixers': []},
      \}
nmap <Leader>F <Plug>(ale_fix)

""" vim-test
let test#strategy = 'tslime'
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>

""" NERDCommenter
""" tabular
nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a== :Tabularize /=/=<CR>
vmap <Leader>a== :Tabularize /=/=<CR>
nmap <Leader>a=> :Tabularize /=><CR>
vmap <Leader>a=> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a,, :Tabularize /,\zs<CR>
vmap <Leader>a,, :Tabularize /,\zs<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>

""" tags
nnoremap <silent> <C-t><C-t> :call Tags()<CR>

""" tagbar
nmap <F4> :TagbarToggle<CR>
" custom css map
let g:tagbar_type_css = {
      \ 'ctagstype' : 'Css',
      \ 'kinds'     : [
        \ 'c:classes',
        \ 's:selectors',
        \ 'i:identities'
        \ ]
        \ }
" custom elixir map
let g:tagbar_type_elixir = {
      \ 'ctagstype': 'Elixir',
      \ 'kinds' : [
        \ 'f:functions (public)',
        \ 'g:functions (private)',
        \ 'c:callbacks',
        \ 'd:delegates',
        \ 'e:exceptions',
        \ 'i:implementations',
        \ 'a:macros',
        \ 'o:operators',
        \ 'm:modules',
        \ 'p:protocols',
        \ 'r:records',
        \ 't:types',
        \ 'z:foo'
        \ ]
        \ }
" custom ruby map
let g:tagbar_type_ruby = {
      \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
        \ ]
        \ }

""" coc.vim
" confirm first item on CR
inoremap <silent><expr> <cr>
      \ pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
" use TAB to trigger completion
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction
inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" use S-TAB to move back
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" Use <C-l> for trigger snippet expand
imap <C-l> <Plug>(coc-snippets-expand)
" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)
" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)
" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Show doc on hover
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)
" Using CocList
" - Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" - Show yank list
nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>

""" html5.vim
let g:html5_rdfa_attributes_complete = 0
let g:html5_microdata_attributes_complete = 0

""" vim-less
""" vim-css3
""" scss-syntax.vim
""" emmet-vim
let g:user_emmet_mode='inv'
let g:user_emmet_install_global = 0
let g:user_emmet_leader_key='<C-y>'
let g:user_emmet_settings = {
      \  'elixir.eelixir' : {
        \      'extends' : 'html',
        \  },
        \  'javascript.jsx' : {
          \      'extends' : 'jsx',
          \  },
          \}

""" vim-jdaddy
""" vim-json
""" vim-javascript
""" vim-jsx

""" ruby filetype
augroup filetype_ruby
  autocmd!
  autocmd FileType ruby,eruby let g:Tlist_Ctags_Cmd = "ripper-tags"
augroup END

let g:ruby_ctags_arguments = "-f .git/tags -R --sort=yes --tag-relative=yes"
let g:rails_ctags_arguments = "-f .git/tags -R --sort=yes --tag-relative=yes"

""" vim-ruby
let g:ruby_indent_block_style = 'do'
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
let g:rubycomplete_load_gemfile = 0
let g:rubycomplete_use_bundler = 1

""" vim-rails
""" vim-textobj-ruby
let g:textobj_ruby_more_mappings = 1

""" elixir filetype
augroup filetype_elixir
  autocmd!
  autocmd FileType elixir,eelixir let g:Tlist_Ctags_Cmd = "ctags"
  autocmd FileType elixir,eelixir set tags=.git/tags;
  autocmd FileType elixir,eelixir let b:ale_fix_on_save = 1
augroup END

let g:elixir_ctags_arguments = "-f .git/tags --fields=+l --recurse --sort=yes --tag-relative=yes"

augroup filetype_eelixir
  autocmd!
  autocmd FileType eelixir EmmetInstall
augroup END

""" vim-elixir
""" vim-markdown
let g:markdown_fenced_languages = ['html', 'ruby', 'elixir', 'bash=sh']
let g:vim_markdown_no_extensions_in_markdown = 1

""" xml filetype
augroup filetype_xml
  autocmd!
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup END

augroup filetype_wiki
  autocmd!
  autocmd BufRead,BufNewFile *.wiki set filetype=markdown
augroup END

""" vimwiki
let g:vimwiki_list = [{'path': '~/documents/wiki/',
      \ 'syntax': 'markdown',
      \ 'ext': '.md'}]

""" vim-git
" on revert git commit message reposition cursor
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

""" vim-fugitive
set statusline+=%{fugitive#statusline()}

"""tslime.vim
map <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

""" omnicomplete
set completeopt=menu,preview,longest

set background=dark
colorscheme PaperColor

set secure
