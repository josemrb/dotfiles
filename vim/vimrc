" vim: set sw=2 ts=2 sts=2 et tw=120 foldmarker={,} foldlevel=0 foldmethod=marker
" init
set nocompatible

" call before
if filereadable(expand("~/.vimrc.before"))
  source \~/.vimrc.before
endif

" call bundles
if filereadable(expand("~/.vimrc.bundles"))
  source \~/.vimrc.bundles
endif

""" general
" enable indent files
filetype indent on
" enable ft plugins
filetype plugin on
" enable syntax highlight
syntax on

" enable mouse
set mouse=a
set mousehide

" default encoding
set encoding=utf-8
scriptencoding utf-8

" complete mode
set complete-=i

set autoread
set shortmess+=filmnrxoOtT
set viewoptions=folds,options,cursor,unix,slash
set virtualedit=onemore
set history=1000 "store lots of :cmdline history
set spell
set hidden
set iskeyword-=.
set iskeyword-=#
set iskeyword-=-

set nobackup
if ('has_persistence_undo')
  " undo settings
  set undodir=~/.vim/undofiles
  set undofile
  set undolevels=1000
  set undoreload=10000
endif
set noswapfile

" ignore files
set wildignore+=*/tmp/*,*.swp

""" visual ui
set tabpagemax=15 "show max 15 tabs
set showmode "show current mode down the bottom
set cursorline

" set highlight colors
highlight clear SignColumn
highlight clear LineNr

if has('cmdline_info')
  set showcmd "show incomplete cmds down the bottom
  set ruler
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) "a ruler on steroids
endif

if has('statusline')
  " displays always
  set laststatus=2
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set linespace=0
set number "show line numbers

" search highlight
set showmatch
set incsearch "find the next match as we type the search
set hlsearch "hilight searches by default
set winminheight=0 "min windows line height

" case handling
set ignorecase
set smartcase

" menu
set wildmenu "enable menu list
set wildmode=list:longest,full "menu list config
set whichwrap=b,s,h,l,<,>,[,]

" horizontal/vertical scroll settings
set scrolljump=5
set scrolloff=3
set sidescrolloff=7
set sidescroll=1

" fold
set foldmethod=indent "fold based on indent
set foldnestmax=3 "deepest fold is 3 leves
set nofoldenable "disable by default

" display tabs and trailing spaces
set list
set listchars=tab:▷⋅,trail:⋅,extends:>,precedes:<,nbsp:+

" configure default split
set splitright
set splitbelow

set colorcolumn=+1 "mark the ideal max text width

" enable 256 colors console
set t_Co=256

" theme
let g:rehash256 = 1

""" formatting
set nowrap "dont wrap lines
set linebreak "wrap lines at convenient points
set showbreak=↪
set autoindent

" tab/indent settings
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set smarttab

set pastetoggle=<F2>
set nrformats-=octal

set ttimeout
set ttimeoutlen=100

" formating options
set formatoptions-=o
set formatoptions+=j

""" plugins
""" ack.vim

""" vim-indent-guides
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1

""" vim-over

""" numbers
let g:numbers_exclude = ['tagbar', 'nerdtree']
nnoremap <F3> :NumbersToggle<CR>
nnoremap <F4> :NumbersOnOff<CR>

""" vim-airline
" displays all the buffers when only one tab is open
let g:airline#extensions#tabline#enabled = 1
" set alternative separator to pipe
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

""" buffergator
" right side of the screen
let g:buffergator_viewport_split_policy = 'R'
" enable keymappings...
let g:buffergator_suppress_keymaps = 1
" loop buffers
let g:buffergator_mru_cycle_loop = 1
" previous buffer open
nmap <leader>jb :BuffergatorMruCyclePrev<cr>
" next buffer open
nmap <leader>kb :BuffergatorMruCycleNext<cr>
" list of buffers open
nmap <leader>bb :BuffergatorToggle<cr>

""" vim-togglelist
""" vim-unimpaired

""" NERDTree
let g:NERDShutUp=1
map <leader>n :NERDTreeToggle<CR>
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.git$']
" change CWD to follow tree root
let g:NERDTreeChDirMode = 2
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeShowHidden=1

""" NERDtree git
""" vim-eunuch

""" CtrlP
" use leader
let g:ctrlp_map = '<leader>p'
" set default mode
let g:ctrlp_cmd = 'CtrlP'
" set root dir mode
let g:ctrlp_working_path_mode = 'raw'
" default open file mode = current window
let g:ctrlp_open_new_file = 'r'
" multiple files open = current window
let g:ctrlp_open_multiple_files = 'r'
" customize promp mappings
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("h")': ['<c-i>'],
  \ 'AcceptSelection("v")': ['<c-v>']
  \ }
let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/](_build|bower_components|cover|dist|deps|doc|node_modules)|(\.(swp|git|hg))$',
  \ 'file': '\.exe\'
  \ }

""" vim-surround
""" vim-repeat
""" vim-abolish
""" vim-textobj-user
""" vim-textobj-indent

""" wildfire
map <ENTER> <Plug>(wildfire-fuel)
let g:wildfire_objects = {
  \ '*' : ["i'", 'i"', "i)", 'i]', 'i}','i>', 'ip'],
  \ 'html,xml' : ['at', "it"],
  \ }
nmap <leader>s <Plug>(wildfire-quick-select)

""" vim-textobj-sentence
augroup textobj_sentence
  autocmd!
  autocmd FileType markdown call textobj#sentence#init()
  autocmd FileType textile call textobj#sentence#init()
  autocmd FileType text call textobj#sentence#init()
augroup END

""" vim-textobj-quote
augroup textobj_quote
  autocmd!
  autocmd FileType markdown call textobj#quote#init()
  autocmd FileType textile call textobj#quote#init()
  autocmd FileType text call textobj#quote#init()
augroup END

""" vim-textobj-ruby
let g:textobj_ruby_more_mappings = 1

""" vim-multiple-cursors
""" vim-easymotion

""" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_elixir_checkers = ['elixir']
let g:syntastic_enable_elixir_checker = 0

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs = 1

""" NERDCommenter
""" tabular
nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a=> :Tabularize /=><CR>
vmap <Leader>a=> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a,, :Tabularize /,\zs<CR>
vmap <Leader>a,, :Tabularize /,\zs<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>

""" tagbar
nmap <leader>t :TagbarToggle<CR>

let g:tagbar_type_css = {
\ 'ctagstype' : 'Css',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 's:selectors',
        \ 'i:identities'
    \ ]
\ }

let g:tagbar_type_elixir = {
\ 'ctagstype': 'Elixir',
  \ 'kinds' : [
      \ 'f:functions',
      \ 'c:callbacks',
      \ 'd:delegates',
      \ 'e:exceptions',
      \ 'i:implementations',
      \ 'a:macros',
      \ 'm:modules',
      \ 'o:operations',
      \ 'p:protocols',
      \ 'r:records',
    \ ]
  \ }

let g:tagbar_type_ruby = {
  \ 'kinds' : [
      \ 'm:modules',
      \ 'c:classes',
      \ 'd:describes',
      \ 'C:contexts',
      \ 'f:methods',
      \ 'F:singleton methods'
    \ ]
  \ }

""" omnicomplete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" ruby
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1

set completeopt=menu,preview,longest

""" supertab
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-p>"
let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
let g:SuperTabContextDiscoverDiscovery = ["&omnifunc:<c-x><c-o>"]

" completion chaining omnifunc -> keyword or user completion
autocmd FileType *
  \ if &omnifunc != '' |
    \ call SuperTabChain(&omnifunc, "<c-p>") |
    \ call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
  \ endif

" vim-emmet
let g:user_emmet_mode='inv'
let g:user_emmet_install_global = 0
let g:user_emmet_leader_key='<C-z>'
autocmd FileType css,eex,html EmmetInstall

" vim-mustache-handlebars
let g:mustache_abbreviations = 1

" vimwiki
let til_wiki = {}
let til_wiki.path = '~/projects/josemrb/vimwiki'
let g:vimwiki_list = [til_wiki]

" git
" on revert git commit message reposition cursor
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
set background=dark
colorscheme PaperColor
